#!/bin/sh

set -x
set -e

if [ -z "${JOB_NAME}" ] ; then
  echo "No JOB_NAME defined, please run it in jenkins." >&2
  exit 1
fi

if [ -z "${architecture}" ] ; then
  echo "No architecture defined, please run it with matrix configuration using architecture." >&2
  exit 1
fi

PACKAGE=${JOB_NAME%-binaries*}
BINARY_PACKAGE=${PACKAGE%-test*}
if [ -z "$PACKAGE" ] ; then
  echo "Error: could not identify Debian package name based on job name ${JOB_NAME}." >&2
  exit 1
fi
echo "===== building binary package $BINARY_PACKAGE ====="

if [ -n "$1" ] ; then
  REPOS="$1"
  echo "Using supplied repository name $REPOS"
else
  REPOS="${JOB_NAME%-binaries*}"
  echo "No repository supplied, using package name $REPOS"
fi

if [ -n "${sources}" ];
then
    echo "*** identifying newest package version ***"
    newest_version="0"
    for file in "${HUDSON_HOME}/userContent/${PACKAGE}-source/"*.dsc ; do
        p="$(basename $file .dsc)"
        if [ "$p" = '*' ] ; then
            echo "No source package found (forgot to deploy via source job?)" >&2
            exit 1
        fi
        cur_version="${p#*_}"
        if dpkg --compare-versions "${cur_version}" gt "${newest_version}" ; then
            newest_version="${cur_version}"
        else
            base_version="${cur_version}"
        fi
    done
    echo "${newest_version}"
    echo "*** found package version $newest_version ***"
    sourcefile="${HUDSON_HOME}/userContent/${PACKAGE}-source/${BINARY_PACKAGE}"_*"${newest_version}".dsc
else
    sourcefile="${sources}"*.dsc
    p="$(basename $file .dsc)"
    newest_version="${p#*_}"
    echo "*** use $sourcefile (${newest_version}) from $sources"
fi

echo "*** cowbuilder build phase for arch $architecture ***"
case "$architecture" in
  # -B -> binary-only build, limited to architecture dependent packages
  i386)
    linux32 sudo cowbuilder --buildresult "$WORKSPACE" \
      --build $sourcefile \
      --basepath /var/cache/pbuilder/base32.cow --debbuildopts -B
    ;;
  # -b -> binary-only build, no source files are to be built and/or distributed
  amd64|all)
    sudo cowbuilder --buildresult "$WORKSPACE" \
      --build $sourcefile \
      --basepath /var/cache/pbuilder/base.cow --debbuildopts -b
    ;;
  *)
    echo "Unsupported architecture: $architecture" >&2
    exit 1
    ;;
esac


echo "*** removing previous versions from repository ***"
for p in $(dcmd "${WORKSPACE}/${BINARY_PACKAGE}"_*"${newest_version}_${architecture}.changes") ; do
  file="$(basename $p)"
  binpackage="${file%%_*}"
  sudo reprepro -v -b /srv/repository --waitforlock 1000 --architecture \
    "$architecture" remove "${REPOS}" "${binpackage}" || true
  sudo reprepro -v -b /srv/repository --waitforlock 1000 --architecture \
    all remove "${REPOS}" "${binpackage}" || true
done

archall=false
case $architecture in
  all) archall=true
       architecture='*' # support as file expansion in reprepro cmdline
       ;;
esac

echo "*** including binary packages in repository $REPOS ***"
sudo reprepro -v -b /srv/repository --waitforlock 1000 \
  include "${REPOS}" "${WORKSPACE}/${BINARY_PACKAGE}"_*"${newest_version}"_${architecture}.changes

# include the source package only in *one* architecture, being amd64
echo "*** including source package in repository $REPOS ***"
if [ "$architecture" = "amd64" ] || $archall ; then
  sudo reprepro -v -b /srv/repository --waitforlock 1000 includedsc \
    ${sourcefile}
fi

