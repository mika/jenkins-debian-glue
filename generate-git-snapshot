#!/bin/sh

set -x
set -e
set -u

[ -n "${DEBEMAIL:-}" ] || DEBEMAIL="jenkins.grml.org Autobuilder <jenkins@grml.org>"
export DEBEMAIL

if [ ! -d source ] ; then
  echo "Please run the script in the jenkins workspace." >&2
  exit 1
fi

if [ -z "${BUILD_NUMBER:-}" ] ; then
  echo "No BUILD_NUMBER defined, please run it in jenkins." >&2
  exit 1
fi

echo "***  source package build phase ***"
rm -f ./* || true

cd source

if [ "${1:-}" = "auto" ] ; then
  echo "Using git-dch with auto mode."
  git-dch -S --auto --multimaint-merge --snapshot-number=${BUILD_NUMBER} --ignore-branch

  if [ -z "${distribution}" ] ; then
    git-dch -S --auto --multimaint-merge --snapshot-number=${BUILD_NUMBER} --ignore-branch
  else
    git-dch -S --auto --multimaint-merge -n \
     "$(increase-version-number $(parsechangelog -c 1 | awk '/Version/
        {print $2}'))~${BUILD_NUMBER}+${distribution}" \
     --ignore-branch
  fi
else
  echo "Trying to identify latest tag / merge..."
  git checkout -- debian/changelog
  OLD_VERSION=$(dpkg-parsechangelog  | awk '/^Version: / {print $2}')

  tag=$(git describe $(git rev-list --tags='[^ju]*' --max-count=1))
  last_merge=$(git describe $(git rev-list --all --merges --max-count=1))
  since=${tag}

  if [ -n "$last_merge" ] ; then
    m_date=$(git log ${last_merge} --pretty="format:%at" -1)
    t_date=$(git log ${tag} --pretty="format:%at" -1)
    if [ ${m_date} -gt ${t_date} ] ; then
      since=${last_merge}
    fi
  fi

  echo "Last tag / merge seems to be $since"
  git-dch -S -s "${since}" --multimaint-merge --snapshot-number=${BUILD_NUMBER} --ignore-branch

  NEW_VERSION=$(dpkg-parsechangelog  | awk '/^Version: / {print $2}')

  if dpkg --compare-versions "$NEW_VERSION" lt "$OLD_VERSION" ; then
    echo "Calculated version is older than last release, falling back to auto mode."
    git checkout -- debian/changelog
    git-dch -S --auto --multimaint-merge --snapshot-number=${BUILD_NUMBER} --ignore-branch
  fi

fi

debchange --release ""

if ! git-buildpackage -tc --git-ignore-new -S -us -uc ; then
  echo "git-buildpackage did not work, trying dpkg-source"
  cd ..
  dpkg-source -b source
fi

# needed for deploying artifacts
mkdir -p ${JENKINS_HOME}/userContent/${JOB_NAME}/
